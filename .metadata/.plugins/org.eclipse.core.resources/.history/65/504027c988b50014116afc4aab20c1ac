package mykmeans.umbc.edu;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;
import java.util.StringTokenizer;


/*
 * Author: Yin Huang
 * Date: Feb 5, 2015
 * This is my implementation of Kmeans algorithm which cluter the input digit files into K
 * clusters. 
 * 
 * To decide if my kmeans have converged or not, I use the minimum value to store the minimum distance sum for each iteration, 
 * if newest minimum value is not smaller then we know we should stop.
 * 
 * Input: 1. K, k clusters to be found for the input file
 * 		  2. Input file path
 * 		  
 * Output: {S_1, S_2,...S_k}
 */
public class Kmeans {
	private static final int MAXITERATION = 10; //This is the maximum number of iterations in case the algorithm doesn't converge
	private int k;        // Num of clusters
	private ArrayList<Dataobject> vectors = new ArrayList<Dataobject>(); // vectors in an arraylist.
	private static final String DELIMITER = " ";
    private ArrayList<Cluster> Clusters = new ArrayList<Cluster>()	; // the initial k centers 
	private Set<Integer> thisSet;
	private double minimum = Double.MAX_VALUE;
	/*
	 * This function will read input file and store them into vectors
	 * Assuming that each line in the input file corresponds to a vector
	 * 
	 */
	private void ReadInput(String inputFilePath){
		int index = 0;
		try (BufferedReader br = new BufferedReader(new FileReader(inputFilePath)))
		{
 
			String sCurrentLine;
		
			while ((sCurrentLine = br.readLine()) != null) {
				//System.out.println(sCurrentLine);
				Dataobject myVector = new Dataobject();
				myVector.id = index;
				index++;
				StringTokenizer token = new StringTokenizer(sCurrentLine,DELIMITER);
				while(token.hasMoreTokens())
				{
					final int number = Integer.parseInt(token.nextToken());
					myVector.arr.add(number);
				}
				vectors.add(myVector);
			}
 
		} catch (IOException e) {
			e.printStackTrace();
		} 
		
	}
	/*
	 * initializeCenter: initializes numOfCenters centers for the data we will initialize the cluster label as well
	 * Input: K the number of clusters
	 * Output: will update the centers vector
	 */
	
	private void initializeCenter(int numOfCenters){
		if(numOfCenters <= 0) return;
	    Random randomGenerator = new Random();
	    thisSet = new HashSet<Integer>();
	    int idx = thisSet.size();
	    int dataSize = vectors.size();
	    while(thisSet.size()<numOfCenters){
	      int randomInt = randomGenerator.nextInt(dataSize);
	      if(!thisSet.contains(randomInt)) {
	    	  Dataobject oneCenter = vectors.get(randomInt);
	    	  oneCenter.label = idx+1;
	    	  thisSet.add(randomInt);
	    	  Cluster oneCluster = new Cluster(oneCenter);
	    	  Clusters.add(oneCluster);
	      }
	    }
	    System.out.println(thisSet.toString());
	}
	
	/*
	 * Help function to calculate the Euclidean distance
	 * Input: Two data objects
	 */
	
	private double myDistance(Dataobject A, Dataobject B){
		double temp = 0;
		int i =0;
		while(i<Dataobject.Dimension){
			temp += Math.pow(A.arr.get(i) - B.arr.get(i), 2);
			i++;
		}
		return Math.sqrt(temp);
	}
	/*
	 * Assign data points to their closet center
	 * Input: the data vectors and the center vectors
	 * Output: the sum of minimum distance for each data vector to its center vector, this sum will be used to determine the termination of our loop.
	 */
	
	private double assign(ArrayList<Dataobject> datavectors, ArrayList<Cluster> clusters){
		 double localMin = 0;
		for(int i = 0; i<datavectors.size();i++){
			double tempD = Double.MAX_VALUE;
				for(int j = 0; j< clusters.size();j++){
				            if(tempD >= myDistance(datavectors.get(i),clusters.get(j).getCenter())){
				            	tempD = myDistance(datavectors.get(i),clusters.get(j).getCenter()); 
				            	datavectors.get(i).label = clusters.get(j).getCenter().label;
				            	clusters.get(j).getDatavector().add(datavectors.get(i));
				            } // we assign datavector i to the centervector j if the distance is smallest among all centervectors
					}
				localMin += tempD;
				}
		return localMin;
		}
		 
	private void update(){
		
	}

	
	public static void main(String[] args){
		String path = "/home/yhuang9/Documents/CMSC 678/Homework 1/MNIST/mnist_data.txt";
		Kmeans km = new Kmeans();
		km.ReadInput(path);
		Iterator<Dataobject> it = km.vectors.iterator();
		/*
		while(it.hasNext()){
			System.out.println(it.next().toString());
		}
		
		
		km.initializeCenter(10);
		Iterator<Dataobject> centerit = km.centers.iterator();
		while(centerit.hasNext())
			System.out.println(centerit.next().toString());
				
	}
	 */
	}
}
